{"version":3,"file":"static/js/ajs-destination.915f7c59.chunk.js","mappings":"mIAQM,SAAUA,EACdC,EACAC,G,QAGA,MAAkC,mBAAd,OAATA,QAAS,IAATA,OAAS,EAATA,EAAWC,SACbD,EAAUC,QAIY,QAAxB,EAAe,QAAf,EAAI,OAAJF,QAAI,IAAJA,OAAI,EAAJA,EAAMG,iBAAS,eAAED,eAAO,QACjC,C,2SCPA,SAASE,EAAcC,GACrB,OAAOA,EAAKC,cAAcC,QAAQ,IAAK,IAAIA,QAAQ,OAAQ,IAC7D,CAEA,SAASC,EAAkBC,EAAkBC,GAC3C,YAD2C,IAAAA,IAAAA,GAAY,GAChDA,EAAYC,KAAKF,GAAUF,QAAQ,KAAM,SAAMK,CACxD,CAmDM,SAAgBC,EACpBC,EACAT,EACAU,EACAL,G,sHAEMD,EAAWL,EAAcC,GACzBW,EAAqBR,EAAkBC,EAAUC,GACjDO,GAAOC,EAAAA,EAAAA,MAEPC,EAAW,UAAGF,EAAI,yBACJ,OAAlBD,QAAkB,IAAlBA,EAAAA,EAAsBP,EAAQ,YAC5BM,EAAO,YAAsB,OAAlBC,QAAkB,IAAlBA,EAAAA,EAAsBP,EAAQ,kB,iBAG3C,O,sBAAA,IAAMW,EAAAA,EAAAA,GAAWD,I,cAAjBE,EAAAA,OAtDJ,SAA2BF,EAAkBL,EAAcT,G,QACzD,IACS,IAAAiB,GACsD,QAA3D,EAAmB,QAAnB,EAAM,OAANC,aAAM,IAANA,YAAM,EAANA,OAAQC,mBAAW,eAAEC,iBAAiBN,EAAU,mBAAW,QAAI,IAAE,GAEnEG,GACER,EAAIY,MAAMC,MAAM,0BAA2BC,KAAKC,MAAMP,EAAOQ,WAAW,SACtEzB,GACIiB,EAAOQ,SAAW,IAAM,CAAC,UAAY,IAAG,GAGhD,CADA,MAAOC,GACP,CAEJ,CA0CIC,CAAkBb,EAAUL,EAAKT,G,aAGjC,M,WADAS,EAAIY,MAAMC,MAAM,2BAA4B,EAAG,CAAC,iBAAUtB,GAAQ,WAC5D4B,E,OAKR,OADMC,EAAiBX,OAAO,UAAGd,EAAQ,SACzC,GAAM0B,QAAQC,IAAIF,EAAKG,KAAI,SAACC,GAAQ,cAAWrB,EAAOqB,EAAM,MAAxB,M,OAKpC,OALAjB,EAAAA,OAGAE,OAAO,UAAGd,EAAQ,aAEX,CAAP,EAAOc,OAEL,UAAGd,EAAQ,iB,OCtFT,SAAU8B,EACdC,GAEA,MACqE,WAAnEC,OAAOC,UAAUC,SAASC,KAAKJ,GAAKK,MAAM,GAAI,GAAGvC,aAErD,CCjBO,IAAMwC,EAA2B,SACtCzC,EACA0C,G,MAEQC,EAA0CD,EAAmB,KAAvDE,EAAoCF,EAAmB,eAAvCG,EAAoBH,EAAmB,gBAG/DI,EACe,cAAnBF,IACU,YAATD,IAAqD,QAA/B,EAAe,OAAfE,QAAe,IAAfA,OAAe,EAAfA,EAAiBE,sBAAc,eAAEC,SAAS,aAKnE,OAAQhD,EAAKiD,WAAW,YAAuB,aAATjD,GAAuB8C,CAC/D,EAEaI,EAAwB,SACnCC,EACAC,GAEA,IAAMC,GACuB,IAA3BD,EAAmBE,UACqB/C,IAAxC6C,EAAmBD,GAErB,OAC0C,IAAxCC,EAAmBD,IAA8BE,CAErD,ECGA,SAAeE,EACbC,EACAC,G,mHAIA,OAFMC,EAAyB,IAE3BC,EAAAA,EAAAA,KACK,CAAP,EAAOF,GAGT,IAAMG,EAAAA,EAAAA,IACJ,WAAM,OAAAH,EAAMI,OAAS,IAAKC,EAAAA,EAAAA,IAApB,IACN,sD,gEAEE,OADMrD,EAAMgD,EAAMM,OAKH,IAAMC,EAAAA,EAAAA,GAAQvD,EAAK+C,IAHhC,I,cAGIS,EAASjD,EAAAA,OACCiD,aAAkBC,EAAAA,GAEhCR,EAAYS,KAAK1D,G,sBAOvB,OAlBAO,EAAAA,OAiBA0C,EAAY1B,KAAI,SAACoC,GAAW,OAAAX,EAAMY,gBAAgBD,EAAtB,IACrB,CAAP,EAAOX,G,OAGT,iBAoBE,WACEzD,EACAU,EACA4D,EACAC,EACAC,QAFA,IAAAF,IAAAA,EAAAA,CAAAA,GAnBF,KAAAC,QAAuB,CAAC,EACxB,KAAA5B,KAAuB,cACvB,KAAA8B,WAA8C,GAEtC,KAAAC,QAAS,EACT,KAAAC,cAAe,EASvB,KAAAC,UAAW,EASTC,KAAK7E,KAAOA,EACZ6E,KAAKnE,QAAUA,EACfmE,KAAKP,UAAW,WAAKA,GACrBO,KAAKC,yBAA2BP,EAAQO,2BAA4B,EACpED,KAAKL,kBAAoBA,EAIrBK,KAAKP,SAAe,MAA+B,YAA1BO,KAAKP,SAAe,aACxCO,KAAKP,SAAe,KAG7BO,KAAKN,QAAUA,EACfM,KAAKE,OAASR,EAAQS,yBAClB,IAAIC,EAAAA,EAAc,EAAG,IACrB,IAAIC,EAAAA,EAAuB,EAAG,eAAQlF,IAE1C6E,KAAKM,eACP,CA+MF,OA7MEC,EAAAA,UAAAA,SAAA,WACE,OAAOP,KAAKH,MACd,EAEAU,EAAAA,UAAAA,MAAA,W,MACE,OAAmB,QAAZ,EAAAP,KAAKQ,eAAO,QAAIvD,QAAQwD,SACjC,EAEMF,EAAAA,UAAAA,KAAN,SAAW3E,EAAc8E,G,2HACvB,OAAIV,KAAKH,aAA2BnE,IAAjBsE,KAAKQ,QACtB,IAIsB,Q,EAAtBR,KAAKL,yBAAiB,a,kBACrB,SAAMhE,EACLC,EACAoE,KAAK7E,KACL6E,KAAKnE,QACLmE,KAAKN,QAAQlE,Y,OAJfmF,EAACC,EAAAA,O,iBAFGjB,EAAiB,EASvBK,KAAKa,YHzFH,SACJlB,EACA9B,EACA6C,GAEA,IAAII,EAEA,gBAAiBnB,GAMnBA,EALsB,CACpBoB,KAAM,WAAY,OAAAL,EAAkBK,MAAlB,EAClBC,eAAgB,WAAa,IAI/BF,EAAiBnB,EAAkBsB,aAEnCH,EAAiBnB,EAGnB,IAAMkB,EAAc,IAAIC,EAAejD,GAEvC,OADAgD,EAAYK,UAAYR,EACjBG,CACT,CGmEuBM,CACjBxB,EACAK,KAAKP,SACLiB,GAGFV,KAAKQ,QAAU,IAAIvD,SAAQ,SAACwD,GAM1BW,EAAKP,YAAaQ,KAAK,SALL,WAChBD,EAAKvB,QAAS,EACdY,GAAQ,EACV,GAGF,IAEAT,KAAKsB,aAAe,IAAIrE,SAAQ,SAACwD,GAM/BW,EAAKP,YAAaU,GAAG,cALN,WACbH,EAAKtB,cAAe,EACpBW,GAAQ,EACV,GAGF,IAEA,IACE7E,EAAIY,MAAMgF,UAAU,kCAAmC,EAAG,CACxD,oBACA,2BAAoBxB,KAAK7E,QAG3B6E,KAAKa,YAAYY,Y,CACjB,MAAOC,GAMP,MALA9F,EAAIY,MAAMgF,UAAU,wCAAyC,EAAG,CAC9D,oBACA,2BAAoBxB,KAAK7E,QAGrBuG,C,mBAIVnB,EAAAA,UAAAA,OAAA,SAAOoB,EAAeC,GACpB,OHxEE,SACJzG,EACAU,EACAL,G,2FAUA,OARMO,GAAOC,EAAAA,EAAAA,MACPT,EAAWL,EAAcC,GACzBW,EAAqBR,EAAkBH,EAAMK,GAE7CS,EAAW,UAAGF,EAAI,yBACJ,OAAlBD,QAAkB,IAAlBA,EAAAA,EAAsBP,EAAQ,YAC5BM,EAAO,YAAsB,OAAlBC,QAAkB,IAAlBA,EAAAA,EAAsBP,EAAQ,kBAEtC,CAAP,GAAOsG,EAAAA,EAAAA,GAAa5F,G,OG2DX6F,CAAkB9B,KAAK7E,KAAM6E,KAAKnE,QAASmE,KAAKN,QAAQlE,UACjE,EAEA+E,EAAAA,UAAAA,cAAA,W,UAAc,SAAAwB,EAAAA,UAAAA,OAAAA,IAAAC,EAAAA,GAAAA,UAAAA,GACZhC,KAAKJ,YAAa,EAAAI,KAAKJ,YAAWqC,OAAM,QAAID,EAC9C,EAEAzB,EAAAA,UAAAA,aAAA,SAAa3E,GACX,MAEqB,SAAnBA,EAAIsG,MAAMpE,QACTgB,EAAAA,EAAAA,OAA+B,IAAhBkB,KAAKH,SAA0C,IAAtBG,KAAKF,aAElD,EAEcS,EAAAA,UAAAA,KAAd,SACE3E,EACAuG,EACAC,G,8HAEA,GAAIpC,KAAKqC,aAAazG,GAGpB,OAFAoE,KAAKE,OAAOZ,KAAK1D,GACjBoE,KAAKM,gBACE,CAAP,EAAO1E,GAMT,GAHMd,EAAyB,QAAlB,EAAY,QAAZ,EAAAkF,KAAKN,eAAO,eAAE5E,YAAI,eAAEwH,MAC3BC,EAAK3G,EAAIsG,MAAMA,MAEjBpH,GAAQyH,GAAoB,eAAdvC,KAAK7E,KAAuB,CAG5C,GADMJ,EAAYD,EAAKyH,KAClB1H,EAAAA,EAAAA,GAAmBC,EAAMC,GAa5B,OAZAa,EAAI4G,YAAY,gBAAgB,oBAC3B5G,EAAIsG,MAAMO,cAAY,CACzBhE,KAAK,EACL,cAAc,KAEhB7C,EAAI8G,OACF,IAAIC,EAAAA,EAAmB,CACrBC,OAAO,EACPC,OAAQ,gBAASN,EAAE,qCAA6BvC,KAAK7E,KAAI,qBACzD2C,KAAM,qBAGH,CAAP,EAAOlC,GAQT,GANEA,EAAI4G,YAAY,gBAAgB,oBAC3B5G,EAAIsG,MAAMO,cACD,OAAT1H,QAAS,IAATA,OAAS,EAATA,EAAW0H,gBAIL,OAAT1H,QAAS,IAATA,OAAS,EAATA,EAAWC,WAAmD,KAA/B,OAATD,QAAS,IAATA,OAAS,EAATA,EAAW0H,aAAczC,KAAK7E,OAQtD,OAPAS,EAAI8G,OACF,IAAIC,EAAAA,EAAmB,CACrBC,OAAO,EACPC,OAAQ,gBAASN,EAAE,qCAA6BvC,KAAK7E,KAAI,qBACzD2C,KAAM,qBAGH,CAAP,EAAOlC,E,CAIa,UAAMkH,EAAAA,EAAAA,4BAC5B9C,KAAK7E,KACLS,EAAIsG,MACJlC,KAAKJ,a,OAGP,GAAwB,QANlBmD,EAAkBnC,EAAAA,QAOtB,MAAO,CAAP,EAAOhF,GAGHsG,EAAQ,IAAIC,EAAIY,EAAiB,CACrCC,UAAWhD,KAAKC,2BAGlBrE,EAAIY,MAAMgF,UAAU,kCAAmC,EAAG,CACxD,iBAAUY,GACV,2BAAoBpC,KAAK7E,Q,8CAIrB6E,KAAKa,YACP,GAAMb,KAAKa,YAAYoC,OAAOvF,KAAKsC,KAAKa,YAAauB,EAAWF,IAD9D,M,OACFtB,EAAAA,O,oCAOF,M,WAJAhF,EAAIY,MAAMgF,UAAU,wCAAyC,EAAG,CAC9D,iBAAUY,GACV,2BAAoBpC,KAAK7E,QAErB4B,E,OAGR,MAAO,CAAP,EAAOnB,G,QAGH2E,EAAAA,UAAAA,MAAN,SAAY3E,G,+EACV,MAAO,CAAP,EAAOoE,KAAKkD,KAAKtH,EAAKuH,EAAAA,MAA2B,S,QAG7C5C,EAAAA,UAAAA,KAAN,SAAW3E,G,gGAKT,OAJoB,QAAhB,EAAAoE,KAAKa,mBAAW,eAAEuC,oBAAqBpD,KAAKF,cAC9CE,KAAKa,YAAYY,aAGZ,CAAP,EAAOzB,KAAKsB,aAAc+B,MAAK,WAC7B,OAAOjC,EAAK8B,KAAKtH,EAAK0H,EAAAA,KAAyB,OACjD,I,QAGI/C,EAAAA,UAAAA,SAAN,SAAe3E,G,+EACb,MAAO,CAAP,EAAOoE,KAAKkD,KAAKtH,EAAK2H,EAAAA,SAAiC,Y,QAGnDhD,EAAAA,UAAAA,MAAN,SAAY3E,G,+EACV,MAAO,CAAP,EAAOoE,KAAKkD,KAAKtH,EAAK4H,EAAAA,MAA2B,S,QAG7CjD,EAAAA,UAAAA,MAAN,SAAY3E,G,+EACV,MAAO,CAAP,EAAOoE,KAAKkD,KAAKtH,EAAK6H,EAAAA,MAA2B,S,QAG3ClD,EAAAA,UAAAA,cAAR,sBACMP,KAAKD,UAKT2D,YAAW,sD,8DAEK,OADd1D,KAAKD,UAAW,EAChB5D,EAAAA,KAAc,GAAMuC,EAAWsB,KAAMA,KAAKE,S,cAA1C/D,EAAK+D,OAASS,EAAAA,OACdX,KAAKD,UAAW,EAEZC,KAAKE,OAAOyD,KAAO,GACrB3D,KAAKM,gB,aAEU,IAAhB5D,KAAKkH,SACV,EACF,EA5PA,GA8PM,SAAUC,EACdpE,EACAlB,EACAmB,EACAoE,EACAC,G,QAEA,QALA,IAAAxF,IAAAA,EAAAA,CAAAA,QACA,IAAAmB,IAAAA,EAAAA,CAAAA,IAIIsE,EAAAA,EAAAA,KACF,MAAO,GAGLvE,EAAS3E,QACX4E,EAAiB,OAAPA,QAAO,IAAPA,EAAAA,EAAW,CAAC,GACd5E,KAAO2E,EAAS3E,MAG1B,IAAMmJ,EAAwD,QAAzC,EAA2B,QAA3B,EAAAxE,EAASyE,0BAAkB,eAAED,oBAAY,QAAI,GAC5DE,EAA2B1E,EAASgD,aACpC2B,EAA0B1E,EAAQ+C,aAElC4B,GAAqBC,EAAAA,EAAAA,GAAc7E,EAAiB,OAAPC,QAAO,IAAPA,EAAAA,EAAW,CAAC,GAKzD6E,EAAkD,OAAxBR,QAAwB,IAAxBA,OAAwB,EAAxBA,EAA0BS,QACxD,SAACC,EAAK9E,G,MAAsB,gBAAC,WACxB8E,KAAG,MHtUN,SACJ9E,GAEA,OACE,gBAAiBA,EACbA,EAAkBsB,YAClBtB,GACJnC,UAAUrC,IACd,CG+TOuJ,CAAiC/E,IAAqBA,EAAiB,GAF9C,GAI5B,CAAC,GAGGgF,EAA0B,IAAIC,KAAI,oBAEnCrH,OAAOsH,KAAKV,GAA0BW,QAAO,SAAC3J,GAC/C,OAAAyC,EAAyBzC,EAAMgJ,EAAyBhJ,GAAxD,KACD,GAGEoC,OAAOsH,KAAKN,GAA2B,CAAC,GAAGO,QAC5C,SAAC3J,GACC,OAAAkC,EAAc8G,EAAyBhJ,KACvCkC,EAAqC,OAAvB+G,QAAuB,IAAvBA,OAAuB,EAAvBA,EAA0BjJ,GADxC,KAEH,IAGH,OAAO4J,MAAMC,KAAKL,GACfG,QAAO,SAAC3J,GAAS,OAAC8J,EAAsB9J,EAAMoD,EAA7B,IACjBpB,KAAI,SAAChC,GACJ,IACMU,EH1PN,SACJ4D,G,YAEA,OAEoC,QADlC,EAAmC,QAAnC,EAAyB,QAAzB,EAAQ,OAARA,QAAQ,IAARA,OAAQ,EAARA,EAAUzB,uBAAe,eAAEkH,gBAAQ,QACV,QAAzB,EAAQ,OAARzF,QAAQ,IAARA,OAAQ,EAARA,EAAUzB,uBAAe,eAAEnC,eAAO,QAClC,QAEJ,CGkPsBsJ,CADYhB,EAAyBhJ,IAE/CiK,EAAc,IAAI7E,EACtBpF,EACAU,EACAwI,EAAmBlJ,GACnBuE,EACuB,OAAvB6E,QAAuB,IAAvBA,OAAuB,EAAvBA,EAA0BpJ,IAU5B,OAPgB8I,EAAaa,QAC3B,SAACO,GAAS,OAAAA,EAAKC,kBAAoBnK,CAAzB,IAEA6D,OAAS,GAAK8E,GACxBsB,EAAYG,cAAczB,GAGrBsB,CACT,GACJ,C","sources":["../node_modules/@segment/analytics-next/src/lib/is-plan-event-enabled.ts","../node_modules/@segment/analytics-next/src/plugins/ajs-destination/loader.ts","../node_modules/@segment/analytics-core/src/validation/helpers.ts","../node_modules/@segment/analytics-next/src/plugins/ajs-destination/utils.ts","../node_modules/@segment/analytics-next/src/plugins/ajs-destination/index.ts"],"sourcesContent":["import { PlanEvent, TrackPlan } from '../core/events/interfaces'\n\n/**\n * Determines whether a track event is allowed to be sent based on the\n * user's tracking plan.\n * If the user does not have a tracking plan or the event is allowed based\n * on the tracking plan configuration, returns true.\n */\nexport function isPlanEventEnabled(\n  plan: TrackPlan | undefined,\n  planEvent: PlanEvent | undefined\n): boolean {\n  // Always prioritize the event's `enabled` status\n  if (typeof planEvent?.enabled === 'boolean') {\n    return planEvent.enabled\n  }\n\n  // Assume absence of a tracking plan means events are enabled\n  return plan?.__default?.enabled ?? true\n}\n","import { Analytics } from '../../core/analytics'\nimport { LegacyIntegrationConfiguration } from '../../browser'\nimport { getNextIntegrationsURL } from '../../lib/parse-cdn'\nimport { Context } from '../../core/context'\nimport { User } from '../../core/user'\nimport { loadScript, unloadScript } from '../../lib/load-script'\nimport {\n  LegacyIntegration,\n  ClassicIntegrationBuilder,\n  ClassicIntegrationSource,\n} from './types'\n\nfunction normalizeName(name: string): string {\n  return name.toLowerCase().replace('.', '').replace(/\\s+/g, '-')\n}\n\nfunction obfuscatePathName(pathName: string, obfuscate = false): string | void {\n  return obfuscate ? btoa(pathName).replace(/=/g, '') : undefined\n}\n\nexport function resolveIntegrationNameFromSource(\n  integrationSource: ClassicIntegrationSource\n) {\n  return (\n    'Integration' in integrationSource\n      ? integrationSource.Integration\n      : integrationSource\n  ).prototype.name\n}\n\nfunction recordLoadMetrics(fullPath: string, ctx: Context, name: string): void {\n  try {\n    const [metric] =\n      window?.performance?.getEntriesByName(fullPath, 'resource') ?? []\n    // we assume everything that took under 100ms is cached\n    metric &&\n      ctx.stats.gauge('legacy_destination_time', Math.round(metric.duration), [\n        name,\n        ...(metric.duration < 100 ? ['cached'] : []),\n      ])\n  } catch (_) {\n    // not available\n  }\n}\n\nexport function buildIntegration(\n  integrationSource: ClassicIntegrationSource,\n  integrationSettings: { [key: string]: any },\n  analyticsInstance: Analytics\n): LegacyIntegration {\n  let integrationCtr: ClassicIntegrationBuilder\n  // GA and Appcues use a different interface to instantiating integrations\n  if ('Integration' in integrationSource) {\n    const analyticsStub = {\n      user: (): User => analyticsInstance.user(),\n      addIntegration: (): void => {},\n    }\n\n    integrationSource(analyticsStub)\n    integrationCtr = integrationSource.Integration\n  } else {\n    integrationCtr = integrationSource\n  }\n\n  const integration = new integrationCtr(integrationSettings)\n  integration.analytics = analyticsInstance\n  return integration\n}\n\nexport async function loadIntegration(\n  ctx: Context,\n  name: string,\n  version: string,\n  obfuscate?: boolean\n): Promise<ClassicIntegrationSource> {\n  const pathName = normalizeName(name)\n  const obfuscatedPathName = obfuscatePathName(pathName, obfuscate)\n  const path = getNextIntegrationsURL()\n\n  const fullPath = `${path}/integrations/${\n    obfuscatedPathName ?? pathName\n  }/${version}/${obfuscatedPathName ?? pathName}.dynamic.js.gz`\n\n  try {\n    await loadScript(fullPath)\n    recordLoadMetrics(fullPath, ctx, name)\n  } catch (err) {\n    ctx.stats.gauge('legacy_destination_time', -1, [`plugin:${name}`, `failed`])\n    throw err\n  }\n\n  // @ts-ignore\n  const deps: string[] = window[`${pathName}Deps`]\n  await Promise.all(deps.map((dep) => loadScript(path + dep + '.gz')))\n\n  // @ts-ignore\n  window[`${pathName}Loader`]()\n\n  return window[\n    // @ts-ignore\n    `${pathName}Integration`\n  ] as ClassicIntegrationSource\n}\n\nexport async function unloadIntegration(\n  name: string,\n  version: string,\n  obfuscate?: boolean\n): Promise<void> {\n  const path = getNextIntegrationsURL()\n  const pathName = normalizeName(name)\n  const obfuscatedPathName = obfuscatePathName(name, obfuscate)\n\n  const fullPath = `${path}/integrations/${\n    obfuscatedPathName ?? pathName\n  }/${version}/${obfuscatedPathName ?? pathName}.dynamic.js.gz`\n\n  return unloadScript(fullPath)\n}\n\nexport function resolveVersion(\n  settings?: LegacyIntegrationConfiguration\n): string {\n  return (\n    settings?.versionSettings?.override ??\n    settings?.versionSettings?.version ??\n    'latest'\n  )\n}\n","import { CoreSegmentEvent } from '../events'\n\nexport function isString(obj: unknown): obj is string {\n  return typeof obj === 'string'\n}\n\nexport function isNumber(obj: unknown): obj is number {\n  return typeof obj === 'number'\n}\n\nexport function isFunction(obj: unknown): obj is Function {\n  return typeof obj === 'function'\n}\n\nexport function isPlainObject(\n  obj: unknown\n): obj is Record<string | symbol | number, any> {\n  return (\n    Object.prototype.toString.call(obj).slice(8, -1).toLowerCase() === 'object'\n  )\n}\n\nexport function hasUser(event: CoreSegmentEvent): boolean {\n  const id =\n    event.userId ?? event.anonymousId ?? event.groupId ?? event.previousId\n  return isString(id)\n}\n","import { Integrations } from '@segment/analytics-core'\nimport { LegacyIntegrationConfiguration } from '../..'\n\nexport const isInstallableIntegration = (\n  name: string,\n  integrationSettings: LegacyIntegrationConfiguration\n) => {\n  const { type, bundlingStatus, versionSettings } = integrationSettings\n  // We use `!== 'unbundled'` (versus `=== 'bundled'`) to be inclusive of\n  // destinations without a defined value for `bundlingStatus`\n  const deviceMode =\n    bundlingStatus !== 'unbundled' &&\n    (type === 'browser' || versionSettings?.componentTypes?.includes('browser'))\n\n  // checking for iterable is a quick fix we need in place to prevent\n  // errors showing Iterable as a failed destiantion. Ideally, we should\n  // fix the Iterable metadata instead, but that's a longer process.\n  return !name.startsWith('Segment') && name !== 'Iterable' && deviceMode\n}\n\nexport const isDisabledIntegration = (\n  integrationName: string,\n  globalIntegrations: Integrations\n) => {\n  const allDisableAndNotDefined =\n    globalIntegrations.All === false &&\n    globalIntegrations[integrationName] === undefined\n\n  return (\n    globalIntegrations[integrationName] === false || allDisableAndNotDefined\n  )\n}\n","import { Integrations, JSONObject } from '../../core/events'\nimport { Alias, Facade, Group, Identify, Page, Track } from '@segment/facade'\nimport { Analytics, InitOptions } from '../../core/analytics'\nimport { LegacySettings } from '../../browser'\nimport { isOffline, isOnline } from '../../core/connection'\nimport { Context, ContextCancelation } from '../../core/context'\nimport { isServer } from '../../core/environment'\nimport { DestinationPlugin, Plugin } from '../../core/plugin'\nimport { attempt } from '@segment/analytics-core'\nimport { isPlanEventEnabled } from '../../lib/is-plan-event-enabled'\nimport { mergedOptions } from '../../lib/merged-options'\nimport { pWhile } from '../../lib/p-while'\nimport { PriorityQueue } from '../../lib/priority-queue'\nimport { PersistedPriorityQueue } from '../../lib/priority-queue/persisted'\nimport {\n  applyDestinationMiddleware,\n  DestinationMiddlewareFunction,\n} from '../middleware'\nimport {\n  buildIntegration,\n  loadIntegration,\n  resolveIntegrationNameFromSource,\n  resolveVersion,\n  unloadIntegration,\n} from './loader'\nimport { LegacyIntegration, ClassicIntegrationSource } from './types'\nimport { isPlainObject } from '@segment/analytics-core'\nimport {\n  isDisabledIntegration as shouldSkipIntegration,\n  isInstallableIntegration,\n} from './utils'\n\nexport type ClassType<T> = new (...args: unknown[]) => T\n\nasync function flushQueue(\n  xt: Plugin,\n  queue: PriorityQueue<Context>\n): Promise<PriorityQueue<Context>> {\n  const failedQueue: Context[] = []\n\n  if (isOffline()) {\n    return queue\n  }\n\n  await pWhile(\n    () => queue.length > 0 && isOnline(),\n    async () => {\n      const ctx = queue.pop()\n      if (!ctx) {\n        return\n      }\n\n      const result = await attempt(ctx, xt)\n      const success = result instanceof Context\n      if (!success) {\n        failedQueue.push(ctx)\n      }\n    }\n  )\n\n  // re-add failed tasks\n  failedQueue.map((failed) => queue.pushWithBackoff(failed))\n  return queue\n}\n\nexport class LegacyDestination implements DestinationPlugin {\n  name: string\n  version: string\n  settings: JSONObject\n  options: InitOptions = {}\n  type: Plugin['type'] = 'destination'\n  middleware: DestinationMiddlewareFunction[] = []\n\n  private _ready = false\n  private _initialized = false\n  private onReady: Promise<unknown> | undefined\n  private onInitialize: Promise<unknown> | undefined\n  private disableAutoISOConversion: boolean\n\n  integrationSource?: ClassicIntegrationSource\n  integration: LegacyIntegration | undefined\n\n  buffer: PriorityQueue<Context>\n  flushing = false\n\n  constructor(\n    name: string,\n    version: string,\n    settings: JSONObject = {},\n    options: InitOptions,\n    integrationSource?: ClassicIntegrationSource\n  ) {\n    this.name = name\n    this.version = version\n    this.settings = { ...settings }\n    this.disableAutoISOConversion = options.disableAutoISOConversion || false\n    this.integrationSource = integrationSource\n\n    // AJS-Renderer sets an extraneous `type` setting that clobbers\n    // existing type defaults. We need to remove it if it's present\n    if (this.settings['type'] && this.settings['type'] === 'browser') {\n      delete this.settings['type']\n    }\n\n    this.options = options\n    this.buffer = options.disableClientPersistence\n      ? new PriorityQueue(4, [])\n      : new PersistedPriorityQueue(4, `dest-${name}`)\n\n    this.scheduleFlush()\n  }\n\n  isLoaded(): boolean {\n    return this._ready\n  }\n\n  ready(): Promise<unknown> {\n    return this.onReady ?? Promise.resolve()\n  }\n\n  async load(ctx: Context, analyticsInstance: Analytics): Promise<void> {\n    if (this._ready || this.onReady !== undefined) {\n      return\n    }\n\n    const integrationSource =\n      this.integrationSource ??\n      (await loadIntegration(\n        ctx,\n        this.name,\n        this.version,\n        this.options.obfuscate\n      ))\n\n    this.integration = buildIntegration(\n      integrationSource,\n      this.settings,\n      analyticsInstance\n    )\n\n    this.onReady = new Promise((resolve) => {\n      const onReadyFn = (): void => {\n        this._ready = true\n        resolve(true)\n      }\n\n      this.integration!.once('ready', onReadyFn)\n    })\n\n    this.onInitialize = new Promise((resolve) => {\n      const onInit = (): void => {\n        this._initialized = true\n        resolve(true)\n      }\n\n      this.integration!.on('initialize', onInit)\n    })\n\n    try {\n      ctx.stats.increment('analytics_js.integration.invoke', 1, [\n        `method:initialize`,\n        `integration_name:${this.name}`,\n      ])\n\n      this.integration.initialize()\n    } catch (error) {\n      ctx.stats.increment('analytics_js.integration.invoke.error', 1, [\n        `method:initialize`,\n        `integration_name:${this.name}`,\n      ])\n\n      throw error\n    }\n  }\n\n  unload(_ctx: Context, _analyticsInstance: Analytics): Promise<void> {\n    return unloadIntegration(this.name, this.version, this.options.obfuscate)\n  }\n\n  addMiddleware(...fn: DestinationMiddlewareFunction[]): void {\n    this.middleware = this.middleware.concat(...fn)\n  }\n\n  shouldBuffer(ctx: Context): boolean {\n    return (\n      // page events can't be buffered because of destinations that automatically add page views\n      ctx.event.type !== 'page' &&\n      (isOffline() || this._ready === false || this._initialized === false)\n    )\n  }\n\n  private async send<T extends Facade>(\n    ctx: Context,\n    clz: ClassType<T>,\n    eventType: 'track' | 'identify' | 'page' | 'alias' | 'group'\n  ): Promise<Context> {\n    if (this.shouldBuffer(ctx)) {\n      this.buffer.push(ctx)\n      this.scheduleFlush()\n      return ctx\n    }\n\n    const plan = this.options?.plan?.track\n    const ev = ctx.event.event\n\n    if (plan && ev && this.name !== 'Segment.io') {\n      // events are always sent to segment (legacy behavior)\n      const planEvent = plan[ev]\n      if (!isPlanEventEnabled(plan, planEvent)) {\n        ctx.updateEvent('integrations', {\n          ...ctx.event.integrations,\n          All: false,\n          'Segment.io': true,\n        })\n        ctx.cancel(\n          new ContextCancelation({\n            retry: false,\n            reason: `Event ${ev} disabled for integration ${this.name} in tracking plan`,\n            type: 'Dropped by plan',\n          })\n        )\n        return ctx\n      } else {\n        ctx.updateEvent('integrations', {\n          ...ctx.event.integrations,\n          ...planEvent?.integrations,\n        })\n      }\n\n      if (planEvent?.enabled && planEvent?.integrations![this.name] === false) {\n        ctx.cancel(\n          new ContextCancelation({\n            retry: false,\n            reason: `Event ${ev} disabled for integration ${this.name} in tracking plan`,\n            type: 'Dropped by plan',\n          })\n        )\n        return ctx\n      }\n    }\n\n    const afterMiddleware = await applyDestinationMiddleware(\n      this.name,\n      ctx.event,\n      this.middleware\n    )\n\n    if (afterMiddleware === null) {\n      return ctx\n    }\n\n    const event = new clz(afterMiddleware, {\n      traverse: !this.disableAutoISOConversion,\n    })\n\n    ctx.stats.increment('analytics_js.integration.invoke', 1, [\n      `method:${eventType}`,\n      `integration_name:${this.name}`,\n    ])\n\n    try {\n      if (this.integration) {\n        await this.integration.invoke.call(this.integration, eventType, event)\n      }\n    } catch (err) {\n      ctx.stats.increment('analytics_js.integration.invoke.error', 1, [\n        `method:${eventType}`,\n        `integration_name:${this.name}`,\n      ])\n      throw err\n    }\n\n    return ctx\n  }\n\n  async track(ctx: Context): Promise<Context> {\n    return this.send(ctx, Track as ClassType<Track>, 'track')\n  }\n\n  async page(ctx: Context): Promise<Context> {\n    if (this.integration?._assumesPageview && !this._initialized) {\n      this.integration.initialize()\n    }\n\n    return this.onInitialize!.then(() => {\n      return this.send(ctx, Page as ClassType<Page>, 'page')\n    })\n  }\n\n  async identify(ctx: Context): Promise<Context> {\n    return this.send(ctx, Identify as ClassType<Identify>, 'identify')\n  }\n\n  async alias(ctx: Context): Promise<Context> {\n    return this.send(ctx, Alias as ClassType<Alias>, 'alias')\n  }\n\n  async group(ctx: Context): Promise<Context> {\n    return this.send(ctx, Group as ClassType<Group>, 'group')\n  }\n\n  private scheduleFlush(): void {\n    if (this.flushing) {\n      return\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    setTimeout(async () => {\n      this.flushing = true\n      this.buffer = await flushQueue(this, this.buffer)\n      this.flushing = false\n\n      if (this.buffer.todo > 0) {\n        this.scheduleFlush()\n      }\n    }, Math.random() * 5000)\n  }\n}\n\nexport function ajsDestinations(\n  settings: LegacySettings,\n  globalIntegrations: Integrations = {},\n  options: InitOptions = {},\n  routingMiddleware?: DestinationMiddlewareFunction,\n  legacyIntegrationSources?: ClassicIntegrationSource[]\n): LegacyDestination[] {\n  if (isServer()) {\n    return []\n  }\n\n  if (settings.plan) {\n    options = options ?? {}\n    options.plan = settings.plan\n  }\n\n  const routingRules = settings.middlewareSettings?.routingRules ?? []\n  const remoteIntegrationsConfig = settings.integrations\n  const localIntegrationsConfig = options.integrations\n  // merged remote CDN settings with user provided options\n  const integrationOptions = mergedOptions(settings, options ?? {}) as Record<\n    string,\n    JSONObject\n  >\n\n  const adhocIntegrationSources = legacyIntegrationSources?.reduce(\n    (acc, integrationSource) => ({\n      ...acc,\n      [resolveIntegrationNameFromSource(integrationSource)]: integrationSource,\n    }),\n    {} as Record<string, ClassicIntegrationSource>\n  )\n\n  const installableIntegrations = new Set([\n    // Remotely configured installable integrations\n    ...Object.keys(remoteIntegrationsConfig).filter((name) =>\n      isInstallableIntegration(name, remoteIntegrationsConfig[name])\n    ),\n\n    // Directly provided integration sources are only installable if settings for them are available\n    ...Object.keys(adhocIntegrationSources || {}).filter(\n      (name) =>\n        isPlainObject(remoteIntegrationsConfig[name]) ||\n        isPlainObject(localIntegrationsConfig?.[name])\n    ),\n  ])\n\n  return Array.from(installableIntegrations)\n    .filter((name) => !shouldSkipIntegration(name, globalIntegrations))\n    .map((name) => {\n      const integrationSettings = remoteIntegrationsConfig[name]\n      const version = resolveVersion(integrationSettings)\n      const destination = new LegacyDestination(\n        name,\n        version,\n        integrationOptions[name],\n        options,\n        adhocIntegrationSources?.[name]\n      )\n\n      const routing = routingRules.filter(\n        (rule) => rule.destinationName === name\n      )\n      if (routing.length > 0 && routingMiddleware) {\n        destination.addMiddleware(routingMiddleware)\n      }\n\n      return destination\n    })\n}\n"],"names":["isPlanEventEnabled","plan","planEvent","enabled","__default","normalizeName","name","toLowerCase","replace","obfuscatePathName","pathName","obfuscate","btoa","undefined","loadIntegration","ctx","version","obfuscatedPathName","path","getNextIntegrationsURL","fullPath","loadScript","_a","metric","window","performance","getEntriesByName","stats","gauge","Math","round","duration","_","recordLoadMetrics","err_1","deps","Promise","all","map","dep","isPlainObject","obj","Object","prototype","toString","call","slice","isInstallableIntegration","integrationSettings","type","bundlingStatus","versionSettings","deviceMode","componentTypes","includes","startsWith","isDisabledIntegration","integrationName","globalIntegrations","allDisableAndNotDefined","All","flushQueue","xt","queue","failedQueue","isOffline","pWhile","length","isOnline","pop","attempt","result","Context","push","failed","pushWithBackoff","settings","options","integrationSource","middleware","_ready","_initialized","flushing","this","disableAutoISOConversion","buffer","disableClientPersistence","PriorityQueue","PersistedPriorityQueue","scheduleFlush","LegacyDestination","onReady","resolve","analyticsInstance","_b","_c","integration","integrationCtr","user","addIntegration","Integration","analytics","buildIntegration","_this","once","onInitialize","on","increment","initialize","error","_ctx","_analyticsInstance","unloadScript","unloadIntegration","_i","fn","concat","event","clz","eventType","shouldBuffer","track","ev","updateEvent","integrations","cancel","ContextCancelation","retry","reason","applyDestinationMiddleware","afterMiddleware","traverse","invoke","send","Track","_assumesPageview","then","Page","Identify","Alias","Group","setTimeout","todo","random","ajsDestinations","routingMiddleware","legacyIntegrationSources","isServer","routingRules","middlewareSettings","remoteIntegrationsConfig","localIntegrationsConfig","integrationOptions","mergedOptions","adhocIntegrationSources","reduce","acc","resolveIntegrationNameFromSource","installableIntegrations","Set","keys","filter","Array","from","shouldSkipIntegration","override","resolveVersion","destination","rule","destinationName","addMiddleware"],"sourceRoot":""}